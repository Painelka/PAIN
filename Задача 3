#include <iostream>
using namespace std;
class KinimaticSolver {
private:
	const double l1 = 5;
	const double l2 = 4;
	double m_x, m_y;
	bool dlina1 = true;
public:
	KinimaticSolver() {
		cout << "constructor" << endl;
	}
	KinimaticSolver(const KinimaticSolver& other) {
		m_x = other.m_x;
		m_y = other.m_y;
	}
	void read() {
		cout << "Vvedite znach tochki  M (X and Y) " << endl;
		cin >> m_x;
		cin >> m_y;

	}
	void proverka() {
		
		double dlina = sqrt(m_x * m_x + m_y * m_y);
		if (dlina > (l1+l2)) {
			cout << "ERROR Dlina1" << endl;
			dlina1 = false;
		}
		if (l1 > (dlina + l2)) {
			cout << "ERROR Dlina2" << endl;
			dlina1 = false;
		}
		if (l2 > (dlina + l1)) {
			cout << "ERROR Dlina3" << endl;
			dlina1 = false;
		}
	/*	if ((m_x < 0) || (m_y < 0)) {
			cout << "ERROR" << endl;
		}*/
	}
	void solv() {
		if (dlina1) {
			const double PI = 3.14159265;
			double B = sqrt(m_x * m_x + m_y * m_y); //прямая B соединяющая т. О и с заданной точку (х,у)
			double q1 = acos(m_x / B); // угол между осью OX и прямой B
			double q2 = acos((l1 * l1 - l2 * l2 + B * B) / (2.0 * B*l1));// угол между прямой B и плечом L1
			if ((0 <= q1 <= 1) || (0 <= q2 <= 1)) {
				double Q1 = q1 - q2; // угол альфа
				double Q2 = acos((l1 * l1 + l2 * l2 - B * B) / (2.0 * l1*l2)); // угол бета
				//cout << q1 << endl;
				//cout << q2 << endl;
				/*cout << Q1 << endl;
				cout << Q2 << endl;*/
			}
			else {
				cout << "ERROR angle" << endl;
			}
		}
		else {
			cout << "Ne korektno vvedeni dannie" << endl;
		}
	}
	void shar() {

	}


	~KinimaticSolver() {
		cout << "distructor" << endl;
	}
};


int main() {
	KinimaticSolver M;
	KinimaticSolver M1;
	M.read();
	M.proverka();
	M.solv(); 
	M1.read();
	M1.proverka();
	M1.solv();
	system("pause");
}
