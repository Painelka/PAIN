#include <iostream>
using namespace std;

template <typename O, int P, int Q>
class MultMatrix
{
	O m_matrix[P][Q];
};
template <typename T,int N, int M>
class Matrix
{
	T m_matrix[N][M];
	int m_m, m_n;
public:
		//copy//
	Matrix (const Matrix& other) {
		m_n = N;
		m_m = M;
		if (m_n != other.m_n || m_m != other.m_m) {
			cout << "ERROR" << endl;
		}
		else {
			/*cout << "Copy operator" << endl;*/
			for (int i = 0; i < m_n; i++) {
				for (int j = 0; j < m_m; j++) {
					m_matrix[i][j] = other.m_matrix[i][j];
				}
			}
		}
	}

		//Basic constructor//
	Matrix(int n, int m) {
		m_n = n;
		m_m = m;
		/*cout << "Basic constructor" << endl;*/
		for (int i = 0; i < m_n; i++) {
			for (int j = 0; j < m_m; j++) {
				m_matrix[i][j] = 0;
			}
		}
	}
		//nulptr//
	Matrix() {
		m_n = N;
		m_m = M;
		/*cout << "Copy operator" << endl;*/
		for (int i = 0; i < m_n; i++) {
			for (int j = 0; j < m_m; j++) {
				m_matrix[i][j] = 0;
			}
		}
	}
		//=//
	Matrix& operator=(Matrix& other) {
		m_n = N;
		m_m = M;
		if (m_n != other.m_n || m_m != other.m_m) {
			cout << "ERROR" << endl;
		}
		else {
			/*cout << "Copy assigment operator" << endl;*/
			for (int i = 0; i < m_n; i++) {
				for (int j = 0; j < m_m; j++) {
					swap(m_matrix[i][j], other.m_matrix[i][j]);
				}
			}
			return *this;
		}
	}
	//+=//
	Matrix& operator += (Matrix& other) {
		m_n = N;
		m_m = M;
		if (m_n != other.m_n || m_m != other.m_m) {
			cout << "ERROR" << endl;
		}
		else {
			/*cout << "+= operator" << endl;*/
			for (int i = 0; i < m_n; i++) {
				for (int j = 0; j < m_m; j++) {
					m_matrix[i][j] = other.m_matrix[i][j] + m_matrix[i][j];
				}
			}
			return *this;
		}
	}
	//+//
	Matrix operator + (Matrix& other) {
		m_n = N;
		m_m = M;
		if (m_n != other.m_n || m_m != other.m_m) {
			cout << "ERROR" << endl;
		}
		else {
			/*cout << "+ operator" << endl;*/
			Matrix tp(m_n, m_m); // времення переменная
			for (int i = 0; i < m_n; i++) {
				for (int j = 0; j < m_m; j++) {
					tp.m_matrix[i][j] = other.m_matrix[i][j] + m_matrix[i][j];
				}
			}
			return tp;
		}
	}
	//++//
	Matrix& operator ++ (int) {
		m_n = N;
		m_m = M;
		/*cout << "++ operator" << endl;*/
		for (int i = 0; i < m_n; i++) {
			for (int j = 0; j < m_m; j++) {
				m_matrix[i][j] = 1 + m_matrix[i][j];
			}
		}
		return *this;
	}

	T getIndex(int i, int j) {
		return m_matrix[i][j];
	}
	//*=//
	template <typename O, int P, int Q>
	Matrix& operator *= (Matrix<O, P, Q>& other) {

		m_n = N;
		m_m = M;
		int k = 0;
		if (M != P) {
			cout << "ERROR" << endl;
		}
		else {
			Matrix res(N, Q);

			/*cout << "*= operator" << res.m_n << " " << res.m_m << endl;*/
			for (int i = 0; i < m_n; i++) {
				for (int j = 0; j < m_m; j++) {
					for (int k = 0; k < m_m; k++) {
						res.m_matrix[i][j] += m_matrix[i][k] * other.getIndex(k, j);
					}
				}
			}
			m_n = N;
			m_m = Q;
			/*cout << "m_n - " << m_n << "  m_m - " << m_m << endl;*/
			for (int i = 0; i < m_n; i++) {
				for (int j = 0; j < m_m; j++) {
					m_matrix[i][j] = res.m_matrix[i][j];
				}
			}
			return *this;
		}
	}
	template <typename O, int P, int Q>
	Matrix operator * (Matrix<O, P, Q>& other) {
		m_n = N;
		m_m = M;
		int k = 0;
		if (M != P) {
			cout << "ERROR" << endl;
		}
		else {
			Matrix res(N, Q);
			/*cout << "* operator" << endl;*/
			for (int i = 0; i < m_n; i++) {
				for (int j = 0; j < m_m; j++) {
					for (int k = 0; k < m_m; k++) {
						res.m_matrix[i][j] += m_matrix[i][k] * other.getIndex(k, j);
					}
				}
			}
			return res;
		}
	}
	//Determenant
	double det() {
		m_n = N;
		m_m = M;
		double result = 0;
		if ((m_n == 1) && (m_m == 1)) {
			return m_matrix[0][0];
		}
		else if ((m_n == 2) && (m_m == 2)) {
			result = m_matrix[0][0] * m_matrix[1][1] - m_matrix[0][1] * m_matrix[1][0];
			return result;
		}
		else if ((m_n == 3) && (m_m == 3)) {
			result = m_matrix[0][0] * m_matrix[1][1] * m_matrix[2][2] + m_matrix[0][1] * m_matrix[1][2] * m_matrix[2][0] + m_matrix[1][0] * m_matrix[2][1] * m_matrix[0][2] - m_matrix[0][2] * m_matrix[1][1] * m_matrix[2][0] - m_matrix[1][0] * m_matrix[0][1] * m_matrix[2][2] - m_matrix[2][1] * m_matrix[1][2] * m_matrix[0][0];
			return result;
		}
		else {
			cout << "ERROR2" << endl;
		}
	}
	//[]
	T* operator[] (int i) {
		return m_matrix[i];
	}
	//-------------------------------------------------//
	friend istream& operator >> (istream& in, Matrix& other) {
		cout << "Vvedite matrix" << endl;
		for (int i = 0; i < other.m_n; i++) {
			for (int j = 0; j < other.m_m; j++) {
				in >> other.m_matrix[i][j];
			}
		}
		return in;
	}
	friend ostream& operator << (ostream& fout, const Matrix& other) {
		/*cout << "other.m_n - "<< other.m_n << " " << "other.m_m - "<< other.m_m << endl;*/
		for (int i = 0; i < other.m_n; i++) {
			for (int j = 0; j < other.m_m; j++) {
				fout << other.m_matrix[i][j] << " ";
			}
			cout << endl;
		}
		return fout;
	}

};
int main() {
	Matrix <int, 2, 2> now;
	Matrix <int, 2, 2> other;
	Matrix <int, 2, 2> lop;
	cin >> now;
	cin >> other;
	cout << endl;
	cout << "lop = now " << (lop = now) << endl;
	cout << "now+=other " << (now += other) << endl;
	cout << "now + other " << (now + other) << endl;
	cout << "lop++ " << (lop++) << endl;
	cout << "lop*=now " << (lop *= now) << endl;
	cout << "now*other " << (now*other) << endl;
	cout << "Determenant " << now.det() << endl;
	cout << "[] " << lop[0][1] << endl;
	system("pause");
}
